q()
help r
help demo
help data
help help
clear
clear()
clean
demo()
is.things
image
which iamge
ls
which image
pwd
ls
exit
q
cars
is.things()
is
is()
is
help(is)
cars
plot(cars)
demo
demo(scoping)
help(list)
demo(errors)
demo(vector)
demo(scoping)
library("Matrix", lib.loc="/usr/local/Cellar/r/3.2.4_1/R.framework/Versions/3.2/Resources/library")
demo(graphics)
demo(capabilities)
demo(capabilities())
demo(topic = graphics)
lev
plot(lev)
par
help(par)
demo(recursion)
demo(package = .packages(all.available = TRUE))
demo(colors)
View(area)
View(area)
View(area)
View(area)
)
demo(nlm)
clear
clear()
demo(lattice)
demo(labels)
demo(panel)
demo(demo)
demo(graphics)
date
time
date()
time()
help(time)
runif
man(runif)
help(runif)
rep()
help(rep)
read
read.table
help(read)
help("read.table")
x -> c(1, 3, 4, 9.4)
x <- c(1, 3, 4, 9.4)
x
x <- c(1, 3, 4, 9)
x
xx
plot(x, xx)
names(x) <- c('a', 'b', 'c', 'd')
x
x['a']
x$a
pwd
cat
ls
help(ls)
ls(x)
environment()
help("environment)
;
this
ha
;
\
`
/
q()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
r <- getOption('repos')
r$IRkernel <- 'http://irkernel.github.io/'
options(repos = r)
help
help(this)
help(help)
ls
ls()
ls(.)
ls('.')
environment()
environment
UseMethod(generic)
cars
car
card
cairo_pdf()
cars
plot(cars)
plot(cars)
plot
cars
plot(cars)
show(cars)
cars.
use graphics;
as.Date.POSIXlt()
as.Date.POSIXlt
help
help()
q()
help()
is.array()
q()
r
help()
update(R)
update('R')
install.packages("installr");
install.packages("installr");
install.packages("installr")
require(installr)
q()
install.packages(c("MASS", "mgcv", "rpart"), lib="/usr/local/Cellar/r/3.4.3_1/lib/R/library")
install.packages("ggplot2")
library("ggplot2")
library("userfriendlyscience")
getcwd()
getwd()
setwd("/Users/shaoliang/Desktop/node-server")
setwd("/Users/shaoliang/Desktop/node server")
setwd("~/Desktop/node_server")
getwd()
ls
ls()
read.csv("stats_df.csv")
data = read.csv("stats_df.csv")
View(data)
data("InsectSprays")
InsectSprays
View(InsectSprays)
data = read.csv("stats_df.csv")
ggplot(data, aes(x=groups, y=percentage, fill=groups)) + geom_boxplot()
one.way <- oneway(data$groups, y = data$percentage, posthoc = 'games-howell')
one.way
counts_df = read.csv("stats_df.csv")
View(counts_df)
ggplot(counts_df, aes(x=group, y=count, fill=group)) + geom_boxplot()
counts_df = read.csv("stats_df.csv")
ggplot(counts_df, aes(x=group, y=count, fill=group)) + geom_boxplot()
tmp <- oneway(counts_df$group, y = counts_df$group, posthoc = 'games-howell')
tmp <- oneway(counts_df$group, y = counts_df$count, posthoc = 'games-howell')
tmp
t.test(count~group, data=counts_df)
oneway
oneway.test(count~group, data=counts_df)
tmp
aov(count~group, data=counts_df)
anova(count~group, data=counts_df)
summary(aov(count~group, data=counts_df))
normal_anova = summary(aov(count~group, data=counts_df))
normal_anova
welch = oneway.test(count~group, data=counts_df)
welch
normal_anova
tmp
one.way$output
